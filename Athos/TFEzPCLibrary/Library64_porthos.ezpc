(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2018 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)

(**************************)
extern void MatMulCSF2D(int32_pl i, int32_pl j, int32_pl k, int64_al[i][j] A, int64_al[j][k] B, int64_al[i][k] C, int64_pl consSF);

(**************************)
extern void ArgMax1(int32_pl outArrS1, int32_pl inArrS1, int32_pl inArrS2, int64_al[inArrS1][inArrS2] inArr, int32_pl dim, int64_al[outArrS1] outArr);

extern void ArgMax3(int32_pl outs1, int32_pl outs2, int32_pl outs3, 
			   int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4,
			   int64_al[ins1][ins2][ins3][ins4] inArr, int32_pl dim, int64_al[outs1][outs2][outs3] outArr);


(**************************)
extern void Relu2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr);
extern void Relu4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr);
extern void Relu5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s1][s2][s3][s4][s5] outArr);

(**************************)
extern void ElemWiseMul2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr1, int64_al[s1][s2] arr2, int64_al[s1][s2] outArr, int64_pl shrout);
extern void ElemWiseMul4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr1, int64_al[s1][s2][s3][s4] arr2, int64_al[s1][s2][s3][s4] outArr, int64_pl shrout);

(**************************)
extern void MaxPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C, 
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr);

(**************************)
extern void AvgPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C, 
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr);

(**************************)
extern void FusedBatchNorm4411(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s4] multArr, int64_al[s4] biasArr, int32_pl consSF, int64_al[s1][s2][s3][s4] outputArr);

(**************************)
extern void ReduceMean24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int64_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl[2] axes,
					  int64_al[outS1][outS2] outputArr
					  );

(**************************)
extern void ClearMemSecret1(int32_pl s1, int64_al[s1] arr);
extern void ClearMemSecret2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr);
extern void ClearMemSecret3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr);
extern void ClearMemSecret4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr);
extern void ClearMemSecret5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr)

extern void ClearMemPublic2(int32_pl s1, int32_pl s2, int32_pl[s1][s2] arr);

(**************************)
extern void StartComputation();
extern void EndComputation();
